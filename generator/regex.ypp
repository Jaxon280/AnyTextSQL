%define api.prefix {regex_yy}
%{
#include <stdio.h>
#include <string.h>
#include <stdint.h>
#include <stdlib.h>
%}

%code requires
{
#include "parser/inter/nfa.hpp"
}

%parse-param { vlex::NFA** nfa }
%lex-param { REGEX_YYSTYPE &yylval }

%code provides
{
typedef union REGEX_YYSTYPE REGEX_YYSTYPE;

#ifndef YY_DECL
#define YY_DECL int regex_yylex(REGEX_YYSTYPE &yylval)
YY_DECL;
#endif

int regex_yyerror(vlex::NFA **nfa, const char *s);
}

%union
{
    vlex::NFA *nfa;
    int ivalue;
    uint8_t ucvalue; // todo: UTF-8
    char cvalue;
	char *svalue;
    uint8_t *charsets; // size: 256
};

%{
#include "parser/regex/regex-node.hpp"
%}
%token <cvalue> RCHAR_TK
%token <ivalue> RCNUM_TK
%token <svalue> '*' '(' ')' '.' '[' ']' '+' '-' '|' '%' '?' '^' RSUBMATCH_TK
%token <nfa> RALPH_TK RCAPT_TK RDIGIT_TK RINT_TK RDOUBLE_TK
%token REOF_TK 0
%type <nfa> regex union simple_re concat basic_re star plus select elementary_re int double count
%type <charsets> charset setitems setitem range

%%

// https://www2.cs.sfu.ca/~cameron/Teaching/384/99-3/regexp-plg.html

line: regex { *nfa=$1; };

regex: union { $$ = $1; }
    | simple_re { $$ = $1; }
    ;

union: regex '|' simple_re { $$ = buildUnionNFA($1, $3); };

simple_re: concat { $$ = $1; }
    | basic_re { $$ = $1; }
    ;

concat: simple_re basic_re { $$ = buildConcatNFA($1, $2); };

basic_re: star { $$ = $1; }
    | plus { $$ = $1; }
    | select { $$ = $1; }
    | elementary_re { $$ = $1; }
    | count { $$ = $1; }
    ;

star: elementary_re '*' { $$ = buildStarNFA($1); };

plus: elementary_re '+' { $$ = buildPlusNFA($1);};

select: elementary_re '?' { $$ = buildSelectNFA($1);};

elementary_re: '(' regex ')' { $$ = buildParenthesis($2); }
    | '(' RSUBMATCH_TK regex ')' { $$ = buildSubmatchNFA($3, $2); }
    | '.' { $$ = buildWildcardNFA(); }
    | RDIGIT_TK { $$ = buildDigitNFA(); }
    | RALPH_TK { $$ = buildAlphNFA(); }
    | RCAPT_TK { $$ = buildCaptNFA(); }
    | RCHAR_TK { $$ = buildNFA($1); }
    | int { $$ = $1; }
    | double { $$ = $1; }
    | charset { $$ = buildCharsetsNFA($1); }
    ;

int: RINT_TK { $$ = buildINT(); };

double: RDOUBLE_TK { $$ = buildDOUBLE(); };

count: elementary_re RCNUM_TK { $$ = buildNumNFA($1, $2); };

charset: '[' setitems ']' { $$ = $2; }
    | '[' '^' setitems ']' { $$ = negateCharsets($3); }
    ;

setitems: setitem { $$ = $1; }
    | setitem setitems { $$ = addCharsets($1, $2); }
    ;

setitem: range { $$ = $1; }
    | RCHAR_TK { $$ = buildCharsets($1); }
    ;

range: RCHAR_TK '-' RCHAR_TK { $$ = buildRangeCharsets($1, $3); };

%%
int regex_yyerror(vlex::NFA **nfa, const char *s){
    *nfa = NULL;
	return *s;
}

/* void debug(NFA *nfa) {
    printf("Transition Size: %d\n", nfa->transSize);
    printf("State Size: %d\n", nfa->stateSize);
    printf("Init State: %d\n", nfa->initState);
    printf("Accept State: %d\n", nfa->acceptState);
    int sc;
    for (SubMatch *sm = nfa->subms; sm != NULL; sm = sm->next) {
        printf("Submatches[%d] name: %s, start: %d, end: %d\n", sc, sm->name, sm->start, sm->end);
        sc++;
    }
    for (int ti = 0; ti < nfa->transSize; ti++) {
        if (nfa->transVec[ti].c == -1) {
            printf("Transition[%d] start: %d, end: %d, char: EPSILON\n", ti, nfa->transVec[ti].start, nfa->transVec[ti].end);
        } else {
            printf("Transition[%d] start: %d, end: %d, char: %c\n", ti, nfa->transVec[ti].start, nfa->transVec[ti].end, (char)nfa->transVec[ti].c);
        }
    }
} */
