%define api.prefix {command_yy}
%{
#include <stdio.h>
#include <string.h>
#include <stdint.h>
#include <stdlib.h>
%}
%parse-param { vlex::CommandContext& ctx }
%lex-param { COMMAND_YYSTYPE &yylval }

%code provides
{
typedef union COMMAND_YYSTYPE COMMAND_YYSTYPE;

#ifndef YY_DECL
#define YY_DECL int command_yylex(COMMAND_YYSTYPE &yylval)
YY_DECL;
#endif

int command_yyerror(vlex::CommandContext &ctx, const char *s);
}

%code requires
{
#include "parser/inter/command.hpp"
}

%union
{
    char *svalue;
    vlex::StringList *slist;
};
%{
#include "parser/cmd/command-node.hpp"
%}
%token <svalue> CFILENAME_TK CIDENTIFIER_TK CPATTERN_TK ',' '[' ']'
%token CSCAN_TK CTABLE_TK CEXP_TK CKEYS_TK
%token CEOF_TK 0
%type <svalue> filename identifier pattern
%type <slist> patterns

%left ','

%%

command: CSCAN_TK filename arguments { ctx.assignFilename($2); };

tablename: CTABLE_TK identifier { ctx.assignTable($2); };

expression: CEXP_TK pattern { ctx.assignExp($2); }
    | CKEYS_TK '[' patterns ']' { ctx.assignKeys($3); }
    ;

arguments: tablename expression
    | expression tablename
    ;

identifier: CIDENTIFIER_TK {$$ = $1;};

filename: CFILENAME_TK {$$ = $1;};

patterns: pattern {$$ = buildPatterns(NULL, $1);}
    | patterns ',' pattern {$$ = buildPatterns($1, $3);}
    ;

pattern: CPATTERN_TK {$$ = $1;};

%%
int command_yyerror(vlex::CommandContext &ctx, const char *s){
    ctx.grammarError(s);
	return *s;
}
